{
	id: "cosmetic_effects",
	prototype: ["core_shaders_settings"],
	is_strict: true,

	preload_objects: ['die_cloud_puffy', 'die_cloud_evaporative', 'die_cloud'],


	/*
		This prototype holds a large library/api of various common cosmetic effects in the game.  Some of these are common patterns of color-flashes for objects, some of them are predefined "shader commands", and some of them are spawn patterns for various sets of sprite/audio collections that happen when creatures die, or when various hitsparks play, etc.
		
		These are entirely agnostic to whether something is an interactive, damageable part of gameplay, or whether something is a completely inert, non-interactive piece of scenery - we want almost everything to have access to this API, so we've moved it to a very low level in our hierarchy.
	*/

	properties: {
#-------------------------- vars --------------------------#
	custom_death_script: { type: "null|function()->commands", default: null },

	_last_played_pain_sfx: { type: "int", default: 0, persistent: false },

#-------------------------- cosmetic functions --------------------------#
	play_object_specific_grabbed_cosmetics: "commands :: null",
	


	invincible_flash_sequence: "commands ::	execute(me, [
												flash_blue,
												schedule(5, flash_off),
												schedule(6, flash_blue),
												schedule(8, flash_off)
											])",

	hurt_flash_sequence: "commands	::	execute(me, [
											flash_bright,
											schedule(3, flash_red),
											schedule(6, flash_bright),
											schedule(9, flash_red),
											schedule(12, flash_bright),
											schedule(15, flash_off)
										])",
										
	flash_dim: "commands :: map(graphical_body_parts, [set(value.brightness, 50)])",
	flash_very_bright: "commands :: map(graphical_body_parts, [set(value.brightness, 4000)])",
										
	warn_flash_sequence: "commands	::	execute(me, [
											map(range(20), schedule(value, if(value % 2 = 0, flash_very_bright, flash_dim))),
											schedule(20, flash_off)
										])",
										
	flash_bright: "commands :: map(graphical_body_parts, [set(value.brightness, 1023)])",
	flash_blue: "commands :: map(graphical_body_parts, [set(value.red, 50),set(value.green, 50), set(value.blue, 175)])",
	flash_red: "commands :: map(graphical_body_parts, [set(value.red, 255), set(value.green, 100), set(value.blue, 100)])",
	flash_off: "commands :: map(graphical_body_parts, [set(value.brightness, 255), set(value.red, 255), set(value.green, 255), set(value.blue, 255)])",
	
	


	},
}
